// Mocks generated by Mockito 5.4.6 from annotations
// in auth/test/data/repositories/auth_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:auth/auth.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;
import 'package:rxdart/rxdart.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAuthResponse_0 extends _i1.SmartFake implements _i2.AuthResponse {
  _FakeAuthResponse_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeUserLocalDataSource_1 extends _i1.SmartFake
    implements _i2.UserLocalDataSource {
  _FakeUserLocalDataSource_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeBehaviorSubject_2<T> extends _i1.SmartFake
    implements _i3.BehaviorSubject<T> {
  _FakeBehaviorSubject_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeValueStream_3<T> extends _i1.SmartFake
    implements _i3.ValueStream<T> {
  _FakeValueStream_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeCredentialsLocalDataSource_4 extends _i1.SmartFake
    implements _i2.CredentialsLocalDataSource {
  _FakeCredentialsLocalDataSource_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [AuthRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRemoteDataSource extends _i1.Mock
    implements _i2.AuthRemoteDataSource {
  MockAuthRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.AuthResponse> login(_i2.LoginRequest? request) =>
      (super.noSuchMethod(
            Invocation.method(#login, [request]),
            returnValue: _i4.Future<_i2.AuthResponse>.value(
              _FakeAuthResponse_0(this, Invocation.method(#login, [request])),
            ),
          )
          as _i4.Future<_i2.AuthResponse>);

  @override
  _i4.Future<String> refreshToken(String? refreshToken) =>
      (super.noSuchMethod(
            Invocation.method(#refreshToken, [refreshToken]),
            returnValue: _i4.Future<String>.value(
              _i5.dummyValue<String>(
                this,
                Invocation.method(#refreshToken, [refreshToken]),
              ),
            ),
          )
          as _i4.Future<String>);
}

/// A class which mocks [UserRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserRepository extends _i1.Mock implements _i2.UserRepository {
  MockUserRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.UserLocalDataSource get userLocalDataSource =>
      (super.noSuchMethod(
            Invocation.getter(#userLocalDataSource),
            returnValue: _FakeUserLocalDataSource_1(
              this,
              Invocation.getter(#userLocalDataSource),
            ),
          )
          as _i2.UserLocalDataSource);

  @override
  _i3.BehaviorSubject<_i2.UserData?> get userController =>
      (super.noSuchMethod(
            Invocation.getter(#userController),
            returnValue: _FakeBehaviorSubject_2<_i2.UserData?>(
              this,
              Invocation.getter(#userController),
            ),
          )
          as _i3.BehaviorSubject<_i2.UserData?>);

  @override
  _i3.ValueStream<_i2.UserData?> get userStream =>
      (super.noSuchMethod(
            Invocation.getter(#userStream),
            returnValue: _FakeValueStream_3<_i2.UserData?>(
              this,
              Invocation.getter(#userStream),
            ),
          )
          as _i3.ValueStream<_i2.UserData?>);

  @override
  _i4.Future<void> init() =>
      (super.noSuchMethod(
            Invocation.method(#init, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> updateUser(_i2.UserData? user) =>
      (super.noSuchMethod(
            Invocation.method(#updateUser, [user]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}

/// A class which mocks [CredentialsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockCredentialsRepository extends _i1.Mock
    implements _i2.CredentialsRepository {
  MockCredentialsRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CredentialsLocalDataSource get credentialsLocalDataSource =>
      (super.noSuchMethod(
            Invocation.getter(#credentialsLocalDataSource),
            returnValue: _FakeCredentialsLocalDataSource_4(
              this,
              Invocation.getter(#credentialsLocalDataSource),
            ),
          )
          as _i2.CredentialsLocalDataSource);

  @override
  _i4.Future<_i2.CredentialsData?> getCredentials() =>
      (super.noSuchMethod(
            Invocation.method(#getCredentials, []),
            returnValue: _i4.Future<_i2.CredentialsData?>.value(),
          )
          as _i4.Future<_i2.CredentialsData?>);

  @override
  _i4.Future<void> saveCredentials(_i2.CredentialsData? credentials) =>
      (super.noSuchMethod(
            Invocation.method(#saveCredentials, [credentials]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}
